-- MySQL Script generated by MySQL Workbench
-- Tue Feb 25 12:12:51 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Equipe498866
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Equipe498866` ;

-- -----------------------------------------------------
-- Schema Equipe498866
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Equipe498866` DEFAULT CHARACTER SET utf8 ;
USE `Equipe498866` ;

-- -----------------------------------------------------
-- Table `agencia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `agencia` ;

CREATE TABLE IF NOT EXISTS `agencia` (
  `num_ag` INT NOT NULL AUTO_INCREMENT,
  `nome_ag` VARCHAR(45) NOT NULL,
  `cidade` VARCHAR(45) NOT NULL,
  `sal_total` DECIMAL(15,2) NOT NULL,
  PRIMARY KEY (`num_ag`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cliente` ;

CREATE TABLE IF NOT EXISTS `cliente` (
  `cpf` CHAR(11) NOT NULL,
  `nome_comp` VARCHAR(150) NOT NULL,
  `rg` VARCHAR(15) NOT NULL,
  `orgao_emissor` VARCHAR(20) NOT NULL,
  `uf` CHAR(2) NOT NULL,
  `data_nasc` DATE NOT NULL,
  PRIMARY KEY (`cpf`),
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC) VISIBLE,
  UNIQUE INDEX `rg_UNIQUE` (`rg` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cliente_has_conta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cliente_has_conta` ;

CREATE TABLE IF NOT EXISTS `cliente_has_conta` (
  `cliente_cpf` CHAR(11) NOT NULL,
  `conta_num_conta` INT NOT NULL,
  PRIMARY KEY (`cliente_cpf`, `conta_num_conta`),
  INDEX `fk_cliente_has_conta_conta1_idx` (`conta_num_conta` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `conta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conta` ;

CREATE TABLE IF NOT EXISTS `conta` (
  `num_conta` INT NOT NULL AUTO_INCREMENT,
  `saldo` REAL UNSIGNED NOT NULL DEFAULT 0,
  `senha` VARCHAR(100) NOT NULL,
  `tipo_conta` ENUM('Corrente', 'Poupança', 'Especial') NOT NULL,
  `juros` DECIMAL(5,2) NULL,
  `limite_credito` DECIMAL(10,2) NULL,
  `data_aniversario` DATE NULL,
  `gerente_matricula` INT NOT NULL,
  `agencia_num_ag` INT NOT NULL,
  PRIMARY KEY (`num_conta`, `agencia_num_ag`),
  UNIQUE INDEX `num_conta_UNIQUE` (`num_conta` ASC) VISIBLE,
  INDEX `fk_conta_funcionario1_idx` (`gerente_matricula` ASC) VISIBLE,
  INDEX `fk_conta_agencia1_idx` (`agencia_num_ag` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `dependente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dependente` ;

CREATE TABLE IF NOT EXISTS `dependente` (
  `nome_comp` VARCHAR(150) NOT NULL,
  `matricula` INT NOT NULL,
  `data_nas` DATE NOT NULL,
  `idade` INT NOT NULL DEFAULT (TIMESTAMPDIFF(YEAR, data_nas, CURDATE())),
  `parentesco` ENUM('Filho', 'Filha', 'Cônjuge', 'Genitor(a)') NOT NULL,
  PRIMARY KEY (`nome_comp`, `matricula`),
  INDEX `fk_dependente_funcionario1_idx` (`matricula` ASC) VISIBLE,
  UNIQUE INDEX `nome_comp_UNIQUE` (`nome_comp` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `email`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `email` ;

CREATE TABLE IF NOT EXISTS `email` (
  `id_email` INT NOT NULL AUTO_INCREMENT,
  `cliente_cpf` CHAR(11) NOT NULL,
  `email` VARCHAR(254) NOT NULL,
  `tipo_email` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_email`, `cliente_cpf`),
  INDEX `fk_email_cliente_cliente1_idx` (`cliente_cpf` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `endereco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `endereco` ;

CREATE TABLE IF NOT EXISTS `endereco` (
  `id_end` INT NOT NULL AUTO_INCREMENT,
  `cliente_cpf` CHAR(11) NOT NULL,
  `tipo_log` VARCHAR(45) NOT NULL,
  `rua` VARCHAR(100) NOT NULL,
  `num` INT NOT NULL,
  `bairro` VARCHAR(100) NOT NULL,
  `cep` CHAR(10) NOT NULL,
  `cidade` VARCHAR(100) NOT NULL,
  `estado` CHAR(2) NOT NULL,
  PRIMARY KEY (`id_end`, `cliente_cpf`),
  INDEX `fk_endereco_cliente1_idx` (`cliente_cpf` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `funcionario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `funcionario` ;

CREATE TABLE IF NOT EXISTS `funcionario` (
  `matricula` INT NOT NULL AUTO_INCREMENT,
  `num_ag` INT NOT NULL,
  `nome_comp` VARCHAR(100) NOT NULL,
  `senha` VARCHAR(100) NOT NULL,
  `endereço` VARCHAR(100) NOT NULL,
  `cidade` VARCHAR(80) NOT NULL,
  `cargo` ENUM('Gerente', 'Atendente', 'Caixa') NOT NULL,
  `genero` ENUM('Masculino', 'Feminino', 'Não-binário') NOT NULL,
  `data_nasc` DATE NOT NULL,
  `salario` DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (`matricula`),
  INDEX `fk_funcionario_agencia_idx` (`num_ag` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `telefone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `telefone` ;

CREATE TABLE IF NOT EXISTS `telefone` (
  `id_tel` INT NOT NULL AUTO_INCREMENT,
  `cliente_cpf` CHAR(11) NOT NULL,
  `telefone` VARCHAR(11) NOT NULL,
  `tipo_tel` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_tel`, `cliente_cpf`),
  INDEX `fk_telefone_cliente_cliente1_idx` (`cliente_cpf` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `transacao`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `transacao` ;

CREATE TABLE IF NOT EXISTS `transacao` (
  `num_transacao` INT NOT NULL AUTO_INCREMENT,
  `conta_num_conta` INT NOT NULL,
  `tipo_transacao` ENUM('Saque', 'Deposito', 'Pagamento', 'Estorno', 'Transferencia', 'PIX') NOT NULL,
  `data_hora` DATETIME NOT NULL,
  `valor` REAL NOT NULL,
  PRIMARY KEY (`num_transacao`, `conta_num_conta`),
  UNIQUE INDEX `num_transacao_UNIQUE` (`num_transacao` ASC) VISIBLE,
  INDEX `fk_transacao_conta1_idx` (`conta_num_conta` ASC) VISIBLE)
ENGINE = InnoDB;

USE `Equipe498866`;

DELIMITER $$

USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `cliente_has_conta_BEFORE_INSERT` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`cliente_has_conta_BEFORE_INSERT` BEFORE INSERT ON `cliente_has_conta` FOR EACH ROW
BEGIN
	DECLARE num_cpf_conta INT;
    DECLARE conta_existente INT;
    
    -- Verifica se já existe uma conta para o mesmo cliente na mesma agência
    SELECT COUNT(*) INTO conta_existente
    FROM cliente_has_conta chc
    JOIN conta c ON chc.conta_num_conta = c.num_conta
    WHERE chc.cliente_cpf = NEW.cliente_cpf 
    AND c.agencia_num_ag = (SELECT agencia_num_ag FROM conta WHERE num_conta = NEW.conta_num_conta);

    IF conta_existente > 0 THEN 
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = "O cliente já possui uma conta nesta agência";
    END IF;
    
    -- Verifica se a conta já tem dois titulares
    SELECT COUNT(*) INTO num_cpf_conta
    FROM cliente_has_conta
    WHERE conta_num_conta = NEW.conta_num_conta;
    
    IF num_cpf_conta >= 2 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'A conta só pode ter até dois titulares.';
    END IF;
END$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `dependente_BEFORE_INSERT` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`dependente_BEFORE_INSERT` BEFORE INSERT ON `dependente` FOR EACH ROW
BEGIN
DECLARE num_dependentes INT;
    DECLARE idade_dependente INT;

    -- Conta o número de dependentes já associados ao funcionário
    SELECT COUNT(*) INTO num_dependentes
    FROM dependente
    WHERE matricula = NEW.matricula;

    -- Se o número de dependentes for 5 ou mais, gera um erro
    IF num_dependentes > 5 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'O funcionário não pode ter mais do que 5 dependentes.';
    END IF;

    -- Calcula a idade do dependente
    SET idade_dependente = TIMESTAMPDIFF(YEAR, NEW.data_nas, CURDATE());

    -- Atualiza o valor da idade no novo dependente
    SET NEW.idade = idade_dependente;
END$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `funcionario_BEFORE_INSERT` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`funcionario_BEFORE_INSERT` BEFORE INSERT ON `funcionario` FOR EACH ROW
BEGIN
IF NEW.salario < 2286.00 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'O salário não pode ser menor que R$2.286,00.';
    END IF;
END$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `funcionario_AFTER_INSERT` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`funcionario_AFTER_INSERT` AFTER INSERT ON `funcionario` FOR EACH ROW
BEGIN
UPDATE agencia 
SET sal_total = sal_total + NEW.salario
WHERE num_ag = NEW.num_ag;
END;$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `funcionario_BEFORE_UPDATE` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`funcionario_BEFORE_UPDATE` BEFORE UPDATE ON `funcionario` FOR EACH ROW
BEGIN
IF NEW.salario < 2286.00 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'O salário não pode ser menor que R$2.286,00.';
    END IF;
END$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `funcionario_AFTER_UPDATE` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`funcionario_AFTER_UPDATE` AFTER UPDATE ON `funcionario` FOR EACH ROW
BEGIN
IF OLD.salario <> NEW.salario THEN
        UPDATE agencia
        SET sal_total = sal_total - OLD.salario + NEW.salario
        WHERE num_ag = NEW.num_ag;
    END IF;
END$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `funcionario_BEFORE_DELETE` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`funcionario_BEFORE_DELETE` BEFORE DELETE ON `funcionario` FOR EACH ROW
BEGIN
UPDATE agencia
    SET sal_total = sal_total - OLD.salario
    WHERE num_ag = OLD.num_ag;
END$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `transacao_BEFORE_INSERT` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`transacao_BEFORE_INSERT` BEFORE INSERT ON `transacao` FOR EACH ROW
BEGIN
SET NEW.data_hora = NOW();
END;$$


USE `Equipe498866`$$
DROP TRIGGER IF EXISTS `transacao_AFTER_INSERT` $$
USE `Equipe498866`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe498866`.`transacao_AFTER_INSERT` AFTER INSERT ON `transacao` FOR EACH ROW
BEGIN
IF NEW.tipo_transacao IN ('Depósito', 'Estorno', 'Pagamento') THEN
        UPDATE conta SET saldo = saldo + NEW.valor WHERE num_conta = NEW.conta_num_conta;
    ELSEIF NEW.tipo_transacao IN ('Saque', 'Transferência', 'PIX') THEN
        IF (SELECT saldo FROM conta WHERE num_conta = NEW.conta_num_conta) - NEW.valor < 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Saldo insuficiente para realizar a transação.';
        ELSE
            UPDATE conta SET saldo = saldo - NEW.valor WHERE num_conta = NEW.conta_num_conta;
        END IF;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
